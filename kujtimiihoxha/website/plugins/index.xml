<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plugins on Iris - Documentation</title>
    <link>http://iris-go.com/plugins/</link>
    <description>Recent content in Plugins on Iris - Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://iris-go.com/plugins/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Plugins</title>
      <link>http://iris-go.com/plugins/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://iris-go.com/plugins/</guid>
      <description>&lt;p&gt;Plugins are modules that you can build to inject the Iris&amp;rsquo; flow. Think it like a middleware for the Iris framework itself, not the requests. Middleware starts it&amp;rsquo;s actions after the server listen and executes itself on every request, Plugin on the other hand starts working when you registered it, it has to do with framework&amp;rsquo;s code, it has access to the *iris.Framework, so it can register routes, start a second server, read the iris&amp;rsquo; configs or edit them and all things you can do with Iris. Look how it&amp;rsquo;s interface looks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type (
    // Plugin just an empty base for plugins
    // A Plugin can be added with: .Add(PreListenFunc(func(*Framework))) and so on... or
    // .Add(myPlugin{},myPlugin2{}) which myPlugin is  a struct with any of the methods below or
    //.PostListen(func(*Framework)) and so on...
    Plugin interface {
    }

    // pluginGetName implements the GetName() string method
    pluginGetName interface {
        // GetName has to returns the name of the plugin, a name is unique
        // name has to be not dependent from other methods of the plugin,
        // because it is being called even before the Activate
        GetName() string
    }

    // pluginGetDescription implements the GetDescription() string method
    pluginGetDescription interface {
        // GetDescription has to returns the description of what the plugins is used for
        GetDescription() string
    }

    // pluginActivate implements the Activate(pluginContainer) error method
    pluginActivate interface {
        // Activate called BEFORE the plugin being added to the plugins list,
        // if Activate returns none nil error then the plugin is not being added to the list
        // it is being called only one time
        //
        // PluginContainer parameter used to add other plugins if that&#39;s necessary by the plugin
        Activate(PluginContainer) error
    }
    // pluginPreListen implements the PreListen(*Framework) method
    pluginPreListen interface {
        // PreListen it&#39;s being called only one time, BEFORE the Server is started (if .Listen called)
        // is used to do work at the time all other things are ready to go
        //  parameter is the station
        PreListen(*Framework)
    }
    // PreListenFunc implements the simple function listener for the PreListen(*Framework)
    PreListenFunc func(*Framework)
    // pluginPostListen implements the PostListen(*Framework) method
    pluginPostListen interface {
        // PostListen it&#39;s being called only one time, AFTER the Server is started (if .Listen called)
        // parameter is the station
        PostListen(*Framework)
    }
    // PostListenFunc implements the simple function listener for the PostListen(*Framework)
    PostListenFunc func(*Framework)
    // pluginPreClose implements the PreClose(*Framework) method
    pluginPreClose interface {
        // PreClose it&#39;s being called only one time, BEFORE the Iris .Close method
        // any plugin cleanup/clear memory happens here
        //
        // The plugin is deactivated after this state
        PreClose(*Framework)
    }
    // PreCloseFunc implements the simple function listener for the PreClose(*Framework)
    PreCloseFunc func(*Framework)

    // pluginPreDownload It&#39;s for the future, not being used, I need to create
    // and return an ActivatedPlugin type which will have it&#39;s methods, and pass it on .Activate
    // but now we return the whole pluginContainer, which I can&#39;t determinate which plugin tries to
    // download something, so we will leave it here for the future.
    pluginPreDownload interface {
        // PreDownload it&#39;s being called every time a plugin tries to download something
        //
        // first parameter is the plugin
        // second parameter is the download url
        // must return a boolean, if false then the plugin is not permmited to download this file
        PreDownload(plugin Plugin, downloadURL string) // bool
    }

    // PreDownloadFunc implements the simple function listener for the PreDownload(plugin,string)
    PreDownloadFunc func(Plugin, string)

)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;github.com/kataras/iris&amp;quot;
)

func main() {
    // first way:
    // simple way for simple things
    // PreListen before a station is listening ( iris.Listen/TLS...)
    iris.Plugins.PreListen(func(s *iris.Framework) {
        for _, route := range s.Lookups() {
            fmt.Printf(&amp;quot;Func: Route Method: %s | Subdomain %s | Path: %s is going to be registed with %d handler(s). \n&amp;quot;, route.Method(), route.Subdomain(), route.Path(), len(route.Middleware()))
        }
    })

    // second way:
    // structured way for more things
    plugin := myPlugin{}
    iris.Plugins.Add(plugin)

    iris.Get(&amp;quot;/first_route&amp;quot;, aHandler)

    iris.Post(&amp;quot;/second_route&amp;quot;, aHandler)

    iris.Put(&amp;quot;/third_route&amp;quot;, aHandler)

    iris.Get(&amp;quot;/fourth_route&amp;quot;, aHandler)

    iris.Listen(&amp;quot;:8080&amp;quot;)
}

func aHandler(ctx *iris.Context) {
    ctx.Write(&amp;quot;Hello from: %s&amp;quot;, ctx.PathString())
}

type myPlugin struct{}

// PostListen after a station is listening ( iris.Listen/TLS...)
func (pl myPlugin) PostListen(s *iris.Framework) {
    fmt.Printf(&amp;quot;myPlugin: server is listening on host: %s&amp;quot;, s.HTTPServer.Host())
}

//list:
/*
    Activate(iris.PluginContainer)
    GetName() string
    GetDescription() string
    PreListen(*iris.Framework)
    PostListen(*iris.Framework)
    PreClose(*iris.Framework)
    PreDownload(thePlugin iris.Plugin, downloadUrl string)
    // for custom events
    On(string,...func())
    Call(string)
*/

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example of one plugin which is under development is the Iris control, a web interface that gives you control to your server remotely. You can find it&amp;rsquo;s code &lt;a href=&#34;https://github.com/kataras/iris/tree/master/plugins/iriscontrol&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&#34;https://github.com/iris-contrib/plugin&#34;&gt;the real plugins&lt;/a&gt;, easy to make your own.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
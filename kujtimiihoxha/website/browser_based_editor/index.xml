<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Browser_based_editors on Iris - Documentation</title>
    <link>http://iris-go.com/browser_based_editor/</link>
    <description>Recent content in Browser_based_editors on Iris - Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://iris-go.com/browser_based_editor/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Browser based Editor</title>
      <link>http://iris-go.com/browser_based_editor/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://iris-go.com/browser_based_editor/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/iris-contrib/plugin/tree/master/editor&#34;&gt;This is a plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Editor Plugin is just a bridge between Iris and &lt;a href=&#34;http://alm.tools&#34;&gt;alm-tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alm.tools&#34;&gt;alm-tools&lt;/a&gt; is a typescript online IDE/Editor, made by &lt;a href=&#34;https://twitter.com/basarat&#34;&gt;@basarat&lt;/a&gt; one of the top contributors of the &lt;a href=&#34;http://www.typescriptlang.org&#34;&gt;Typescript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Iris gives you the opportunity to edit your client-side using the alm-tools editor, via the editor plugin.&lt;/p&gt;

&lt;p&gt;This plugin starts it&amp;rsquo;s own server, if Iris server is using TLS then the editor will use the same key and cert.&lt;/p&gt;

&lt;h3 id=&#34;how-to-use&#34;&gt;How to use&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;github.com/kataras/iris&amp;quot;
    &amp;quot;github.com/iris-contrib/plugin/editor&amp;quot;
)

func main(){
    e := editor.New() 
   // editor.Config{ Username: &amp;quot;admin&amp;quot;, Password: &amp;quot;admin!123&amp;quot;, Port: 4444, WorkingDir: &amp;quot;/public/scripts&amp;quot;}

    iris.Plugins.Add(e)

    iris.Get(&amp;quot;/&amp;quot;, func (ctx *iris.Context){})

    iris.Listen(&amp;quot;:8080&amp;quot;)
}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note for username, password&lt;/strong&gt;: The Authorization specifies the authentication mechanism (in this case Basic) followed by the username and password.
Although, the string aHR0cHdhdGNoOmY= may look encrypted it is simply a base64 encoded version of username:password.
Would be readily available to anyone who could intercept the HTTP request. &lt;a href=&#34;https://www.httpwatch.com/httpgallery/authentication&#34;&gt;Read more here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The editor can&amp;rsquo;t work if the directory doesn&amp;rsquo;t contains a &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/tsconfig.json.html&#34;&gt;tsconfig.json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using the &lt;a href=&#34;https://github.com/iris-contrib/plugin/tree/master/typescript&#34;&gt;typescript plugin&lt;/a&gt; you don&amp;rsquo;t have to call the .Dir(&amp;hellip;)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
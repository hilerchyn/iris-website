<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic_authentications on Iris - Documentation</title>
    <link>http://iris-go.com/basic_authentication/</link>
    <description>Recent content in Basic_authentications on Iris - Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://iris-go.com/basic_authentication/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basic Authentication</title>
      <link>http://iris-go.com/basic_authentication/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://iris-go.com/basic_authentication/</guid>
      <description>

&lt;p&gt;This is a &lt;a href=&#34;https://github.com/iris-contrib/middleware/tree/master/basicuath&#34;&gt;middleware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTTP Basic authentication (BA) implementation is the simplest technique for enforcing access controls to web resources because it doesn&amp;rsquo;t require cookies, session identifiers, or login pages; rather, HTTP Basic authentication uses standard fields in the HTTP header, obviating the need for handshakes. Read &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34;&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;simple-example&#34;&gt;Simple example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package main

import (
    &amp;quot;github.com/iris-contrib/middleware/basicauth&amp;quot;
    &amp;quot;github.com/kataras/iris&amp;quot;
)

func main() {
    authentication := basicauth.Default(map[string]string{&amp;quot;myusername&amp;quot;: &amp;quot;mypassword&amp;quot;, &amp;quot;mySecondusername&amp;quot;: &amp;quot;mySecondpassword&amp;quot;})

    // to global iris.Use(authentication)
    // to party: iris.Party(&amp;quot;/secret&amp;quot;, authentication) { ... }

    // to routes
    iris.Get(&amp;quot;/secret&amp;quot;, authentication, func(ctx *iris.Context) {
        username := ctx.GetString(&amp;quot;user&amp;quot;) // this can be changed, you will see at the middleware_basic_auth_2 folder
        ctx.Write(&amp;quot;Hello authenticated user: %s &amp;quot;, username)
    })

    iris.Get(&amp;quot;/secret/profile&amp;quot;, authentication, func(ctx *iris.Context) {
        username := ctx.GetString(&amp;quot;user&amp;quot;)
        ctx.Write(&amp;quot;Hello authenticated user: %s from localhost:8080/secret/profile &amp;quot;, username)
    })

    iris.Get(&amp;quot;/othersecret&amp;quot;, authentication, func(ctx *iris.Context) {
        username := ctx.GetString(&amp;quot;user&amp;quot;)
        ctx.Write(&amp;quot;Hello authenticated user: %s from localhost:8080/othersecret &amp;quot;, username)
    })

    iris.Listen(&amp;quot;:8080&amp;quot;)
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configurable-example&#34;&gt;Configurable example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/iris-contrib/middleware/basicauth&amp;quot;
    &amp;quot;github.com/kataras/iris&amp;quot;
)

func main() {
    authConfig := basicauth.Config{
        Users:      map[string]string{&amp;quot;myusername&amp;quot;: &amp;quot;mypassword&amp;quot;, &amp;quot;mySecondusername&amp;quot;: &amp;quot;mySecondpassword&amp;quot;},
        Realm:      &amp;quot;Authorization Required&amp;quot;, // if you don&#39;t set it it&#39;s &amp;quot;Authorization Required&amp;quot;
        ContextKey: &amp;quot;mycustomkey&amp;quot;,            // if you don&#39;t set it it&#39;s &amp;quot;user&amp;quot;
        Expires:    time.Duration(30) * time.Minute,
    }

    authentication := basicauth.New(authConfig)

    // to global iris.Use(authentication)
    // to routes
    /*
        iris.Get(&amp;quot;/mysecret&amp;quot;, authentication, func(ctx *iris.Context) {
            username := ctx.GetString(&amp;quot;mycustomkey&amp;quot;) //  the Contextkey from the authConfig
            ctx.Write(&amp;quot;Hello authenticated user: %s &amp;quot;, username)
        })
    */

    // to party

    needAuth := iris.Party(&amp;quot;/secret&amp;quot;, authentication)
    {
        needAuth.Get(&amp;quot;/&amp;quot;, func(ctx *iris.Context) {
            username := ctx.GetString(&amp;quot;mycustomkey&amp;quot;) //  the Contextkey from the authConfig
            ctx.Write(&amp;quot;Hello authenticated user: %s from localhost:8080/secret &amp;quot;, username)
        })

        needAuth.Get(&amp;quot;/profile&amp;quot;, func(ctx *iris.Context) {
            username := ctx.GetString(&amp;quot;mycustomkey&amp;quot;) //  the Contextkey from the authConfig
            ctx.Write(&amp;quot;Hello authenticated user: %s from localhost:8080/secret/profile &amp;quot;, username)
        })

        needAuth.Get(&amp;quot;/settings&amp;quot;, func(ctx *iris.Context) {
            username := ctx.GetString(&amp;quot;mycustomkey&amp;quot;) //  the Contextkey from the authConfig
            ctx.Write(&amp;quot;Hello authenticated user: %s from localhost:8080/secret/settings &amp;quot;, username)
        })
    }

    iris.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secures on Iris - Documentation</title>
    <link>http://iris-go.com/secure/</link>
    <description>Recent content in Secures on Iris - Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://iris-go.com/secure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secure</title>
      <link>http://iris-go.com/secure/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://iris-go.com/secure/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/iris-contrib/middleware/tree/master/secure&#34;&gt;This is a middleware&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secure is an HTTP middleware for Go that facilitates some quick security wins.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/iris-contrib/middleware/secure&amp;quot;

secure.New(secure.Options{}) // options here

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;github.com/kataras/iris&amp;quot;
    &amp;quot;github.com/iris-contrib/middleware/secure&amp;quot;
)

func main() {
    s := secure.New(secure.Options{
        AllowedHosts:            []string{&amp;quot;ssl.example.com&amp;quot;},                                                                                                                         
        // AllowedHosts is a list of fully qualified domain names
        //that are allowed. Default is empty list, 
        //which allows any and all host names.
        SSLRedirect:             true,     
        
        // If SSLRedirect is set to true, then only allow HTTPS requests.
        //Default is false.
        SSLTemporaryRedirect:    false,    
        
        // If SSLTemporaryRedirect is true, 
        //the a 302 will be used while redirecting.
        //Default is false (301).
        SSLHost:                 &amp;quot;ssl.example.com&amp;quot;,
        
        // SSLHost is the host name that is used to 
        //redirect HTTP requests to HTTPS.
        //Default is &amp;quot;&amp;quot;, which indicates to use the same host.
        SSLProxyHeaders:         map[string]string{&amp;quot;X-Forwarded-Proto&amp;quot;: &amp;quot;https&amp;quot;},
        
        // SSLProxyHeaders is set of header keys with associated values 
        //that would indicate a 
        //valid HTTPS request. Useful when using Nginx: 
        //`map[string]string{&amp;quot;X-Forwarded-
        //Proto&amp;quot;: &amp;quot;https&amp;quot;}`. Default is blank map.
        STSSeconds:              315360000,                                                                                                                                           
        // STSSeconds is the max-age of the Strict-Transport-Security header.
        //Default is 0, which would NOT include the header.
        STSIncludeSubdomains:    true,                                                                                                                                                
        // If STSIncludeSubdomains is set to true, 
        //the `includeSubdomains`
        //will be appended to the Strict-Transport-Security header. Default is false.
        STSPreload:              true,    
        
        // If STSPreload is set to true, the `preload`
        //flag will be appended to the Strict-Transport-Security header.
        //Default is false.
        ForceSTSHeader:          false,  
        
        // STS header is only included when the connection is HTTPS. 
        //If you want to force it to always be added, set to true. 
        //`IsDevelopment` still overrides this. Default is false.
        FrameDeny:               true,    
        // If FrameDeny is set to true, adds the X-Frame-Options header with
        //the value of `DENY`. Default is false.
        CustomFrameOptionsValue: &amp;quot;SAMEORIGIN&amp;quot;,
        // CustomFrameOptionsValue allows the X-Frame-Options header 
        //value to be set with
        //a custom value. This overrides the FrameDeny option.
        ContentTypeNosniff:      true,  
        // If ContentTypeNosniff is true, adds the X-Content-Type-Options
        //header with the value `nosniff`. Default is false.
        BrowserXSSFilter:        true,
        // If BrowserXssFilter is true, adds the X-XSS-Protection header 
        //with the value `1;mode=block`. Default is false.
        ContentSecurityPolicy:   &amp;quot;default-src &#39;self&#39;&amp;quot;,   
        // ContentSecurityPolicy allows the Content-Security-Policy
        //header value to be set with a custom value. Default is &amp;quot;&amp;quot;.
        PublicKey:               `pin-sha256=&amp;quot;base64+primary==&amp;quot;; pin-sha256=&amp;quot;base64+backup==&amp;quot;; max-age=5184000; includeSubdomains; report-uri=&amp;quot;https://www.example.com/hpkp-report&amp;quot;`,
        // PublicKey implements HPKP to prevent 
        //MITM attacks with forged certificates. Default is &amp;quot;&amp;quot;.

        IsDevelopment: true,
        // This will cause the AllowedHosts, SSLRedirect, 
        //..and STSSeconds/STSIncludeSubdomains options to be 
        //ignored during development. 
        //When deploying to production, be sure to set this to false.
    })

    iris.UseFunc(func(c *iris.Context) {
        err := s.Process(c)

        // If there was an error, do not continue.
        if err != nil {
            return
        }

        c.Next()
    })

    iris.Get(&amp;quot;/home&amp;quot;, func(c *iris.Context) {
        c.Write(&amp;quot;Hello from /home&amp;quot;)
    })

    iris.Listen(&amp;quot;:8080&amp;quot;)
}


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http_access_controls on Iris - Documentation</title>
    <link>http://iris-go.com/http_access_control/</link>
    <description>Recent content in Http_access_controls on Iris - Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://iris-go.com/http_access_control/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HTTP access control</title>
      <link>http://iris-go.com/http_access_control/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://iris-go.com/http_access_control/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kataras/iris/tree/master/middleware/cors&#34;&gt;This is a middleware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some security work for you between the requests.&lt;/p&gt;

&lt;p&gt;Options&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    // AllowedOrigins is a list of origins a cross-domain request can be executed from.
    // If the special &amp;quot;*&amp;quot; value is present in the list, all origins will be allowed.
    // An origin may contain a wildcard (*) to replace 0 or more characters
    // (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality.
    // Only one wildcard can be used per origin.
    // Default value is [&amp;quot;*&amp;quot;]
    AllowedOrigins []string
    // AllowOriginFunc is a custom function to validate the origin. It take the origin
    // as argument and returns true if allowed or false otherwise. If this option is
    // set, the content of AllowedOrigins is ignored.
    AllowOriginFunc func(origin string) bool
    // AllowedMethods is a list of methods the client is allowed to use with
    // cross-domain requests. Default value is simple methods (GET and POST)
    AllowedMethods []string
    // AllowedHeaders is list of non simple headers the client is allowed to use with
    // cross-domain requests.
    // If the special &amp;quot;*&amp;quot; value is present in the list, all headers will be allowed.
    // Default value is [] but &amp;quot;Origin&amp;quot; is always appended to the list.
    AllowedHeaders []string

    AllowedHeadersAll bool

    // ExposedHeaders indicates which headers are safe to expose to the API of a CORS
    // API specification
    ExposedHeaders []string
    // AllowCredentials indicates whether the request can include user credentials like
    // cookies, HTTP authentication or client side SSL certificates.
    AllowCredentials bool
    // MaxAge indicates how long (in seconds) the results of a preflight request
    // can be cached
    MaxAge int
    // OptionsPassthrough instructs preflight to let other potential next handlers to
    // process the OPTIONS method. Turn this on if your application handles OPTIONS.
    OptionsPassthrough bool
    // Debugging flag adds additional output to debug server side CORS issues
    Debug bool

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/iris-contrib/middleware/cors&amp;quot;

cors.New(cors.Options{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;github.com/kataras/iris&amp;quot;
    &amp;quot;github.com/iris-contrib/middleware/cors&amp;quot;
)

func main() {

    crs := cors.New(cors.Options{}) // options here

    iris.Use(crs) // register the middleware

    iris.Get(&amp;quot;/home&amp;quot;, func(c *iris.Context) {
        // ...
    })

    iris.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>